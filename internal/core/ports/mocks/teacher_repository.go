// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/OICjangirrahul/students/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// TeacherRepository is an autogenerated mock type for the TeacherRepository type
type TeacherRepository struct {
	mock.Mock
}

// AssignStudent provides a mock function with given fields: teacherID, studentID
func (_m *TeacherRepository) AssignStudent(teacherID int64, studentID int64) error {
	ret := _m.Called(teacherID, studentID)

	if len(ret) == 0 {
		panic("no return value specified for AssignStudent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(teacherID, studentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTeacher provides a mock function with given fields: name, email, password, subject
func (_m *TeacherRepository) CreateTeacher(name string, email string, password string, subject string) (int64, error) {
	ret := _m.Called(name, email, password, subject)

	if len(ret) == 0 {
		panic("no return value specified for CreateTeacher")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) (int64, error)); ok {
		return rf(name, email, password, subject)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) int64); ok {
		r0 = rf(name, email, password, subject)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(name, email, password, subject)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTeacher provides a mock function with given fields: id
func (_m *TeacherRepository) DeleteTeacher(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeacher")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStudentsByTeacherID provides a mock function with given fields: teacherID
func (_m *TeacherRepository) GetStudentsByTeacherID(teacherID int64) ([]domain.Student, error) {
	ret := _m.Called(teacherID)

	if len(ret) == 0 {
		panic("no return value specified for GetStudentsByTeacherID")
	}

	var r0 []domain.Student
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]domain.Student, error)); ok {
		return rf(teacherID)
	}
	if rf, ok := ret.Get(0).(func(int64) []domain.Student); ok {
		r0 = rf(teacherID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Student)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(teacherID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeacherByEmail provides a mock function with given fields: email
func (_m *TeacherRepository) GetTeacherByEmail(email string) (*domain.Teacher, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetTeacherByEmail")
	}

	var r0 *domain.Teacher
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Teacher, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Teacher); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Teacher)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeacherByID provides a mock function with given fields: id
func (_m *TeacherRepository) GetTeacherByID(id int64) (*domain.Teacher, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTeacherByID")
	}

	var r0 *domain.Teacher
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*domain.Teacher, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *domain.Teacher); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Teacher)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginTeacher provides a mock function with given fields: email, password
func (_m *TeacherRepository) LoginTeacher(email string, password string) (string, error) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for LoginTeacher")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTeacher provides a mock function with given fields: teacher
func (_m *TeacherRepository) UpdateTeacher(teacher *domain.Teacher) error {
	ret := _m.Called(teacher)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTeacher")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Teacher) error); ok {
		r0 = rf(teacher)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTeacherRepository creates a new instance of TeacherRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTeacherRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TeacherRepository {
	mock := &TeacherRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
