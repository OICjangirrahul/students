// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/OICjangirrahul/students/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// StudentRepository is an autogenerated mock type for the StudentRepository type
type StudentRepository struct {
	mock.Mock
}

// CreateStudent provides a mock function with given fields: name, email, age, password
func (_m *StudentRepository) CreateStudent(name string, email string, age int, password string) (int64, error) {
	ret := _m.Called(name, email, age, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateStudent")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, string) (int64, error)); ok {
		return rf(name, email, age, password)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, string) int64); ok {
		r0 = rf(name, email, age, password)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, string, int, string) error); ok {
		r1 = rf(name, email, age, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStudentByEmail provides a mock function with given fields: email
func (_m *StudentRepository) GetStudentByEmail(email string) (*domain.Student, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetStudentByEmail")
	}

	var r0 *domain.Student
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Student, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Student); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Student)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStudentByID provides a mock function with given fields: id
func (_m *StudentRepository) GetStudentByID(id int64) (*domain.Student, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetStudentByID")
	}

	var r0 *domain.Student
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*domain.Student, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *domain.Student); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Student)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginStudent provides a mock function with given fields: email, password
func (_m *StudentRepository) LoginStudent(email string, password string) (string, error) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for LoginStudent")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStudentRepository creates a new instance of StudentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStudentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StudentRepository {
	mock := &StudentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
