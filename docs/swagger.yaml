basePath: /
definitions:
  domain.Document:
    properties:
      created_at:
        type: string
      data:
        additionalProperties: true
        type: object
      id:
        type: string
      type:
        type: string
      updated_at:
        type: string
    required:
    - data
    - type
    type: object
  domain.DocumentCreate:
    properties:
      data:
        additionalProperties: true
        type: object
      type:
        type: string
    required:
    - data
    - type
    type: object
  domain.DocumentUpdate:
    properties:
      data:
        additionalProperties: true
        type: object
    required:
    - data
    type: object
  domain.File:
    properties:
      bucket_name:
        example: my-bucket
        type: string
      content_type:
        example: application/pdf
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      name:
        example: document.pdf
        type: string
      size:
        example: 1048576
        type: integer
      uploaded_at:
        example: "2024-03-21T15:30:45Z"
        type: string
      url:
        example: https://storage.example.com/files/document.pdf
        type: string
    type: object
  domain.Student:
    properties:
      age:
        example: 25
        type: integer
      email:
        example: john.doe@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: SecurePass123
        minLength: 6
        type: string
    required:
    - age
    - email
    - name
    - password
    type: object
  domain.StudentLogin:
    properties:
      email:
        example: john.doe@example.com
        type: string
      password:
        example: SecurePass123
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  domain.Teacher:
    properties:
      email:
        example: jane.smith@example.com
        type: string
      name:
        example: Jane Smith
        type: string
      password:
        example: SecurePass123
        minLength: 6
        type: string
      subject:
        example: Mathematics
        type: string
    required:
    - email
    - name
    - password
    - subject
    type: object
  domain.TeacherLogin:
    properties:
      email:
        example: jane.smith@example.com
        type: string
      password:
        example: SecurePass123
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  response.Response:
    properties:
      error:
        type: string
      status:
        description: when its convert into json show status not Status
        type: string
    type: object
host: localhost:8082
info:
  contact: {}
  description: A Go-based REST API for managing students and teachers.
  title: Student-Teacher Management API
  version: "1.0"
paths:
  /api/v1/documents:
    get:
      description: List documents from DynamoDB by type
      parameters:
      - description: Document type
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Document'
            type: array
      summary: List documents from DynamoDB
      tags:
      - documents
    post:
      consumes:
      - application/json
      description: Create a new document in DynamoDB
      parameters:
      - description: Document to create
        in: body
        name: document
        required: true
        schema:
          $ref: '#/definitions/domain.DocumentCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Document'
      summary: Create a document in DynamoDB
      tags:
      - documents
  /api/v1/documents/{id}:
    delete:
      description: Delete a document from DynamoDB by ID
      parameters:
      - description: Document ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a document from DynamoDB
      tags:
      - documents
    get:
      description: Get a document from DynamoDB by ID
      parameters:
      - description: Document ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Document'
      summary: Get a document from DynamoDB
      tags:
      - documents
    put:
      consumes:
      - application/json
      description: Update a document in DynamoDB by ID
      parameters:
      - description: Document ID
        in: path
        name: id
        required: true
        type: string
      - description: Document update data
        in: body
        name: document
        required: true
        schema:
          $ref: '#/definitions/domain.DocumentUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Document'
      summary: Update a document in DynamoDB
      tags:
      - documents
  /api/v1/files:
    get:
      description: List all files from S3 storage
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.File'
            type: array
      summary: List files from S3
      tags:
      - files
    post:
      consumes:
      - multipart/form-data
      description: Upload a file to S3 storage
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.File'
      summary: Upload a file to S3
      tags:
      - files
  /api/v1/files/{id}:
    delete:
      description: Delete a file from S3 storage
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a file from S3
      tags:
      - files
    get:
      description: Download a file from S3 storage
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
      summary: Download a file from S3
      tags:
      - files
  /api/v1/students:
    post:
      consumes:
      - application/json
      description: Create a new student with the provided information
      parameters:
      - description: Student information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.Student'
      produces:
      - application/json
      responses:
        "201":
          description: Created student
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/domain.Student'
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create a new student
      tags:
      - students
  /api/v1/students/{id}:
    get:
      consumes:
      - application/json
      description: Get a student's information by their ID
      parameters:
      - description: Student ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Student found
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/domain.Student'
              type: object
        "404":
          description: Student not found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get a student by ID
      tags:
      - students
  /api/v1/students/login:
    post:
      consumes:
      - application/json
      description: Authenticate a student and return a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.StudentLogin'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    allOf:
                    - type: string
                    - properties:
                        token:
                          type: string
                      type: object
                  type: object
              type: object
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/response.Response'
      summary: Login student
      tags:
      - students
  /api/v1/teachers:
    post:
      consumes:
      - application/json
      description: Create a new teacher with the provided information
      parameters:
      - description: Teacher information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.Teacher'
      produces:
      - application/json
      responses:
        "201":
          description: Created teacher
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/domain.Teacher'
              type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create a new teacher
      tags:
      - teachers
  /api/v1/teachers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a teacher by their ID
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a teacher
      tags:
      - teachers
    get:
      consumes:
      - application/json
      description: Get a teacher's information by their ID
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Teacher found
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/domain.Teacher'
              type: object
        "404":
          description: Teacher not found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get a teacher by ID
      tags:
      - teachers
    put:
      consumes:
      - application/json
      description: Update a teacher's information
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: integer
      - description: Teacher information
        in: body
        name: teacher
        required: true
        schema:
          $ref: '#/definitions/domain.Teacher'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Teacher'
      summary: Update a teacher
      tags:
      - teachers
  /api/v1/teachers/{id}/students:
    get:
      consumes:
      - application/json
      description: Get all students assigned to a teacher
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of students
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Student'
                  type: array
              type: object
        "404":
          description: Teacher not found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get teacher's students
      tags:
      - teachers
  /api/v1/teachers/{id}/students/{studentId}:
    post:
      consumes:
      - application/json
      description: Assign a student to a teacher
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: integer
      - description: Student ID
        in: path
        name: studentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Student assigned
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    allOf:
                    - type: string
                    - properties:
                        message:
                          type: string
                      type: object
                  type: object
              type: object
        "404":
          description: Teacher or student not found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Assign student to teacher
      tags:
      - teachers
  /api/v1/teachers/login:
    post:
      consumes:
      - application/json
      description: Authenticate a teacher and return a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.TeacherLogin'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    allOf:
                    - type: string
                    - properties:
                        token:
                          type: string
                      type: object
                  type: object
              type: object
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/response.Response'
      summary: Login teacher
      tags:
      - teachers
swagger: "2.0"
